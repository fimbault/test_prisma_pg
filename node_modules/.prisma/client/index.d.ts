import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.8.0
 * Query Engine version: e6c9b4b2b7fa162d0d459d1863321f547498fcfe
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'findFirst'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tests
 * const tests = await prisma.test.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tests
   * const tests = await prisma.test.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.test`: Exposes CRUD operations for the **test** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tests
    * const tests = await prisma.test.findMany()
    * ```
    */
  get test(): testDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const TestDistinctFieldEnum: {
  id: 'id',
  name: 'name',
  version: 'version'
};

export declare type TestDistinctFieldEnum = (typeof TestDistinctFieldEnum)[keyof typeof TestDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export declare const QueryMode: {
  default: 'default',
  insensitive: 'insensitive'
};

export declare type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]



/**
 * Model test
 */

export type test = {
  id: number
  name: string
  version: number
}


export type AggregateTest = {
  count: number
  avg: TestAvgAggregateOutputType | null
  sum: TestSumAggregateOutputType | null
  min: TestMinAggregateOutputType | null
  max: TestMaxAggregateOutputType | null
}

export type TestAvgAggregateOutputType = {
  id: number
  version: number
}

export type TestSumAggregateOutputType = {
  id: number
  version: number
}

export type TestMinAggregateOutputType = {
  id: number
  version: number
}

export type TestMaxAggregateOutputType = {
  id: number
  version: number
}


export type TestAvgAggregateInputType = {
  id?: true
  version?: true
}

export type TestSumAggregateInputType = {
  id?: true
  version?: true
}

export type TestMinAggregateInputType = {
  id?: true
  version?: true
}

export type TestMaxAggregateInputType = {
  id?: true
  version?: true
}

export type AggregateTestArgs = {
  where?: testWhereInput
  orderBy?: Enumerable<testOrderByInput> | testOrderByInput
  cursor?: testWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<TestDistinctFieldEnum>
  count?: true
  avg?: TestAvgAggregateInputType
  sum?: TestSumAggregateInputType
  min?: TestMinAggregateInputType
  max?: TestMaxAggregateInputType
}

export type GetTestAggregateType<T extends AggregateTestArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetTestAggregateScalarType<T[P]>
}

export type GetTestAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof TestAvgAggregateOutputType ? TestAvgAggregateOutputType[P] : never
}
    
    

export type testSelect = {
  id?: boolean
  name?: boolean
  version?: boolean
}

export type testGetPayload<
  S extends boolean | null | undefined | testArgs,
  U = keyof S
> = S extends true
  ? test
  : S extends undefined
  ? never
  : S extends testArgs | FindManytestArgs
  ? 'include' extends U
    ? test 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof test ? test[P]
: 
 never
    }
  : test
: test


export interface testDelegate {
  /**
   * Find zero or one Test that matches the filter.
   * @param {FindOnetestArgs} args - Arguments to find a Test
   * @example
   * // Get one Test
   * const test = await prisma.test.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOnetestArgs>(
    args: Subset<T, FindOnetestArgs>
  ): CheckSelect<T, Prisma__testClient<test | null>, Prisma__testClient<testGetPayload<T> | null>>
  /**
   * Find the first Test that matches the filter.
   * @param {FindFirsttestArgs} args - Arguments to find a Test
   * @example
   * // Get one Test
   * const test = await prisma.test.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirsttestArgs>(
    args: Subset<T, FindFirsttestArgs>
  ): CheckSelect<T, Prisma__testClient<test>, Prisma__testClient<testGetPayload<T>>>
  /**
   * Find zero or more Tests that matches the filter.
   * @param {FindManytestArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tests
   * const tests = await prisma.test.findMany()
   * 
   * // Get first 10 Tests
   * const tests = await prisma.test.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const testWithIdOnly = await prisma.test.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManytestArgs>(
    args?: Subset<T, FindManytestArgs>
  ): CheckSelect<T, Promise<Array<test>>, Promise<Array<testGetPayload<T>>>>
  /**
   * Create a Test.
   * @param {testCreateArgs} args - Arguments to create a Test.
   * @example
   * // Create one Test
   * const Test = await prisma.test.create({
   *   data: {
   *     // ... data to create a Test
   *   }
   * })
   * 
  **/
  create<T extends testCreateArgs>(
    args: Subset<T, testCreateArgs>
  ): CheckSelect<T, Prisma__testClient<test>, Prisma__testClient<testGetPayload<T>>>
  /**
   * Delete a Test.
   * @param {testDeleteArgs} args - Arguments to delete one Test.
   * @example
   * // Delete one Test
   * const Test = await prisma.test.delete({
   *   where: {
   *     // ... filter to delete one Test
   *   }
   * })
   * 
  **/
  delete<T extends testDeleteArgs>(
    args: Subset<T, testDeleteArgs>
  ): CheckSelect<T, Prisma__testClient<test>, Prisma__testClient<testGetPayload<T>>>
  /**
   * Update one Test.
   * @param {testUpdateArgs} args - Arguments to update one Test.
   * @example
   * // Update one Test
   * const test = await prisma.test.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends testUpdateArgs>(
    args: Subset<T, testUpdateArgs>
  ): CheckSelect<T, Prisma__testClient<test>, Prisma__testClient<testGetPayload<T>>>
  /**
   * Delete zero or more Tests.
   * @param {testDeleteManyArgs} args - Arguments to filter Tests to delete.
   * @example
   * // Delete a few Tests
   * const { count } = await prisma.test.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends testDeleteManyArgs>(
    args: Subset<T, testDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Tests.
   * @param {testUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tests
   * const test = await prisma.test.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends testUpdateManyArgs>(
    args: Subset<T, testUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Test.
   * @param {testUpsertArgs} args - Arguments to update or create a Test.
   * @example
   * // Update or create a Test
   * const test = await prisma.test.upsert({
   *   create: {
   *     // ... data to create a Test
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Test we want to update
   *   }
   * })
  **/
  upsert<T extends testUpsertArgs>(
    args: Subset<T, testUpsertArgs>
  ): CheckSelect<T, Prisma__testClient<test>, Prisma__testClient<testGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManytestArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateTestArgs>(args: Subset<T, AggregateTestArgs>): Promise<GetTestAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for test.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__testClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * test findOne
 */
export type FindOnetestArgs = {
  /**
   * Select specific fields to fetch from the test
  **/
  select?: testSelect | null
  /**
   * Filter, which test to fetch.
  **/
  where: testWhereUniqueInput
}


/**
 * test findFirst
 */
export type FindFirsttestArgs = {
  /**
   * Select specific fields to fetch from the test
  **/
  select?: testSelect | null
  /**
   * Filter, which test to fetch.
  **/
  where?: testWhereInput
  orderBy?: Enumerable<testOrderByInput> | testOrderByInput
  cursor?: testWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<TestDistinctFieldEnum>
}


/**
 * test findMany
 */
export type FindManytestArgs = {
  /**
   * Select specific fields to fetch from the test
  **/
  select?: testSelect | null
  /**
   * Filter, which tests to fetch.
  **/
  where?: testWhereInput
  /**
   * Determine the order of the tests to fetch.
  **/
  orderBy?: Enumerable<testOrderByInput> | testOrderByInput
  /**
   * Sets the position for listing tests.
  **/
  cursor?: testWhereUniqueInput
  /**
   * The number of tests to fetch. If negative number, it will take tests before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` tests.
  **/
  skip?: number
  distinct?: Enumerable<TestDistinctFieldEnum>
}


/**
 * test create
 */
export type testCreateArgs = {
  /**
   * Select specific fields to fetch from the test
  **/
  select?: testSelect | null
  /**
   * The data needed to create a test.
  **/
  data: testCreateInput
}


/**
 * test update
 */
export type testUpdateArgs = {
  /**
   * Select specific fields to fetch from the test
  **/
  select?: testSelect | null
  /**
   * The data needed to update a test.
  **/
  data: testUpdateInput
  /**
   * Choose, which test to update.
  **/
  where: testWhereUniqueInput
}


/**
 * test updateMany
 */
export type testUpdateManyArgs = {
  data: testUpdateManyMutationInput
  where?: testWhereInput
}


/**
 * test upsert
 */
export type testUpsertArgs = {
  /**
   * Select specific fields to fetch from the test
  **/
  select?: testSelect | null
  /**
   * The filter to search for the test to update in case it exists.
  **/
  where: testWhereUniqueInput
  /**
   * In case the test found by the `where` argument doesn't exist, create a new test with this data.
  **/
  create: testCreateInput
  /**
   * In case the test was found with the provided `where` argument, update it with this data.
  **/
  update: testUpdateInput
}


/**
 * test delete
 */
export type testDeleteArgs = {
  /**
   * Select specific fields to fetch from the test
  **/
  select?: testSelect | null
  /**
   * Filter which test to delete.
  **/
  where: testWhereUniqueInput
}


/**
 * test deleteMany
 */
export type testDeleteManyArgs = {
  where?: testWhereInput
}


/**
 * test without action
 */
export type testArgs = {
  /**
   * Select specific fields to fetch from the test
  **/
  select?: testSelect | null
}



/**
 * Deep Input Types
 */


export type testWhereInput = {
  AND?: testWhereInput | Enumerable<testWhereInput>
  OR?: testWhereInput | Enumerable<testWhereInput>
  NOT?: testWhereInput | Enumerable<testWhereInput>
  id?: IntFilter | number
  name?: StringFilter | string
  version?: IntFilter | number
}

export type testOrderByInput = {
  id?: SortOrder
  name?: SortOrder
  version?: SortOrder
}

export type testWhereUniqueInput = {
  id?: number
}

export type testCreateInput = {
  name: string
  version: number
}

export type testUpdateInput = {
  name?: string | StringFieldUpdateOperationsInput
  version?: number | IntFieldUpdateOperationsInput
}

export type testUpdateManyMutationInput = {
  name?: string | StringFieldUpdateOperationsInput
  version?: number | IntFieldUpdateOperationsInput
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: string | NestedStringFilter
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
